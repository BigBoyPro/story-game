
SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

CREATE EXTENSION IF NOT EXISTS "pgsodium" WITH SCHEMA "pgsodium";

COMMENT ON SCHEMA "public" IS 'standard public schema';

CREATE EXTENSION IF NOT EXISTS "pg_graphql" WITH SCHEMA "graphql";

CREATE EXTENSION IF NOT EXISTS "pg_stat_statements" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "pgcrypto" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "pgjwt" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "supabase_vault" WITH SCHEMA "vault";

CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA "extensions";

CREATE TYPE "public"."story_element_type" AS ENUM (
    'text',
    'image',
    'audio'
);

ALTER TYPE "public"."story_element_type" OWNER TO "postgres";

CREATE OR REPLACE FUNCTION "public"."no_overwrite_lobby_code"() RETURNS "trigger"
    LANGUAGE "plpgsql"
    AS $$BEGIN
    IF NEW.lobby_code IS NOT NULL AND OLD.lobby_code IS NOT NULL THEN
        RAISE EXCEPTION 'Overwriting column lobby_code is not allowed';
    END IF;
    RETURN NEW;
END;$$;

ALTER FUNCTION "public"."no_overwrite_lobby_code"() OWNER TO "postgres";

SET default_tablespace = '';

SET default_table_access_method = "heap";

CREATE TABLE IF NOT EXISTS "public"."lobbies" (
    "code" "text" NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "host_user_id" "uuid" NOT NULL,
    "round" smallint DEFAULT '0'::smallint NOT NULL,
    "users_submitted" smallint DEFAULT '0'::smallint NOT NULL
);

ALTER TABLE "public"."lobbies" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."stories" (
    "id" bigint NOT NULL,
    "index" smallint,
    "lobby_code" "text",
    "name" "text",
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL
);

ALTER TABLE "public"."stories" OWNER TO "postgres";

ALTER TABLE "public"."stories" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."stories_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."story_elements" (
    "id" bigint NOT NULL,
    "index" smallint,
    "story_id" bigint,
    "user_id" "uuid",
    "type" "public"."story_element_type",
    "content" "text",
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL
);

ALTER TABLE "public"."story_elements" OWNER TO "postgres";

ALTER TABLE "public"."story_elements" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."story_elements_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."users" (
    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "nickname" "text" NOT NULL,
    "lobby_code" "text"
);

ALTER TABLE "public"."users" OWNER TO "postgres";

ALTER TABLE ONLY "public"."lobbies"
    ADD CONSTRAINT "lobbies_pkey" PRIMARY KEY ("code");

ALTER TABLE ONLY "public"."stories"
    ADD CONSTRAINT "stories_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."story_elements"
    ADD CONSTRAINT "story_elements_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."users"
    ADD CONSTRAINT "users_pkey" PRIMARY KEY ("id");

CREATE OR REPLACE TRIGGER "users_no_overwrite_lobby_code" BEFORE UPDATE ON "public"."users" FOR EACH ROW EXECUTE FUNCTION "public"."no_overwrite_lobby_code"();

ALTER TABLE ONLY "public"."lobbies"
    ADD CONSTRAINT "lobbies_host_user_id_fkey" FOREIGN KEY ("host_user_id") REFERENCES "public"."users"("id") ON UPDATE CASCADE ON DELETE SET DEFAULT;

ALTER TABLE ONLY "public"."stories"
    ADD CONSTRAINT "stories_lobby_code_fkey" FOREIGN KEY ("lobby_code") REFERENCES "public"."lobbies"("code") ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."story_elements"
    ADD CONSTRAINT "story_elements_story_id_fkey" FOREIGN KEY ("story_id") REFERENCES "public"."stories"("id") ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."story_elements"
    ADD CONSTRAINT "story_elements_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "public"."users"("id") ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."users"
    ADD CONSTRAINT "users_lobby_code_fkey" FOREIGN KEY ("lobby_code") REFERENCES "public"."lobbies"("code") ON UPDATE CASCADE ON DELETE SET DEFAULT;

ALTER TABLE "public"."lobbies" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."stories" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."story_elements" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."users" ENABLE ROW LEVEL SECURITY;

ALTER PUBLICATION "supabase_realtime" OWNER TO "postgres";

GRANT USAGE ON SCHEMA "public" TO "postgres";
GRANT USAGE ON SCHEMA "public" TO "anon";
GRANT USAGE ON SCHEMA "public" TO "authenticated";
GRANT USAGE ON SCHEMA "public" TO "service_role";

GRANT ALL ON FUNCTION "public"."no_overwrite_lobby_code"() TO "anon";
GRANT ALL ON FUNCTION "public"."no_overwrite_lobby_code"() TO "authenticated";
GRANT ALL ON FUNCTION "public"."no_overwrite_lobby_code"() TO "service_role";

GRANT ALL ON TABLE "public"."lobbies" TO "anon";
GRANT ALL ON TABLE "public"."lobbies" TO "authenticated";
GRANT ALL ON TABLE "public"."lobbies" TO "service_role";

GRANT ALL ON TABLE "public"."stories" TO "anon";
GRANT ALL ON TABLE "public"."stories" TO "authenticated";
GRANT ALL ON TABLE "public"."stories" TO "service_role";

GRANT ALL ON SEQUENCE "public"."stories_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."stories_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."stories_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."story_elements" TO "anon";
GRANT ALL ON TABLE "public"."story_elements" TO "authenticated";
GRANT ALL ON TABLE "public"."story_elements" TO "service_role";

GRANT ALL ON SEQUENCE "public"."story_elements_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."story_elements_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."story_elements_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."users" TO "anon";
GRANT ALL ON TABLE "public"."users" TO "authenticated";
GRANT ALL ON TABLE "public"."users" TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "service_role";

RESET ALL;
